{"version":3,"sources":["fonts/SuperFunky.ttf","cat.jpg","jailcat.jpg","Components.js","solutions.js","utils.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","AppButton","_ref","text","onClick","disabled","hover","setHover","useState","AppButtonStyles","backgroundColor","color","border","padding","fontSize","borderRadius","cursor","marginTop","marginLeft","marginRight","React","createElement","Button","style","onMouseOver","onMouseOut","HintButton","_ref2","hint","setHardMode","showHint","setShowHint","handleClick","transition","concat","SOLUTIONS","0","answer","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","findSmallestWordLength","words","length","reduce","minLength","currentWord","currentLength","findLargestWordLength","maxLength","getGameNumber","fs","require","currentDate","Date","date","year","getFullYear","month","getMonth","day","getDate","formattedDate","toString","padStart","data","readFileSync","Math","floor","getTime","writeFileSync","err","console","error","createInitialGrid","lettersPerRow","arguments","undefined","flattenedString","join","totalLetters","modifiedString","repeat","shuffledLetters","split","sort","random","numRows","ceil","grid","i","row","j","index","letter","push","id","value","removeExcessStars","starsToAllow","flat","filter","entry","updatedGrid","kv","Array","from","_","rowIndex","slice","shuffleGrid","shuffledFlatGrid","shuffledGrid","getFormattedDate","today","String","saveUserHistoryForToday","key","historyString","localStorage","getItem","userHistory","JSON","parse","setItem","stringify","getUserHistoryForToday","App","gameNumber","solution","hasOwnProperty","valuesArray","Object","values","smallestLength","largestLength","copyTextRef","useRef","guessEnabled","setGuessEnabled","userInput","setUserInput","guessBox","setGuessBox","fill","textCopied","setTextCopied","selectedLetters","setSelectedLetters","guessCount","setGuessCount","history","setGrid","guessedWords","setGuessedWords","map","word","wordBank","setWordBank","attempts","setAttempts","finishedGame","setFinishedGame","hardMode","makeGuess","input","toLowerCase","includes","guess","wordIndex","findIndex","startsWith","updatedGuessedWords","removedStars","every","revealWord","guessedLetters","guessStatus","indexToRemove","indexOf","revealLetters","className","marginBottom","fontFamily","src","SuperFunky","textShadow","jailcat","alt","height","width","Fragment","cat","attempt","guesses","letterIndex","entryId","display","min","window","innerWidth","alignItems","justifyContent","fontWeight","textTransform","margin","newGuess","newGuessBox","onLetterClick","handleShuffle","newGrid","handleGuess","handleCopyToClipboard","current","hiddenTextArea","document","yaas","nooo","strikes","body","appendChild","select","execCommand","removeChild","ref","readOnly","reportWebVitals","onPerfEntry","Function","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.8545f427.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SuperFunky.c1c6a15b.ttf\";","module.exports = __webpack_public_path__ + \"static/media/cat.491adb26.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jailcat.1651fb58.jpg\";","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nexport const AppButton = ({ text, onClick, disabled = false }) => {\n  const [hover, setHover] = useState(false);\n\n  const AppButtonStyles = {\n    backgroundColor: disabled ? \"#6c757d\" : hover ? \"#50C878\" : \"#4F7942\", // Grey if disabled, Lighter Blue on hover, Dark Blue by default\n    color: \"#ffffff\", // White\n    border: \"none\",\n    padding: \"10px 20px\",\n    fontSize: \"16px\",\n    borderRadius: \"10px\",\n    cursor: disabled ? \"not-allowed\" : \"pointer\", // Change cursor if disabled\n    marginTop: \"8px\",\n    marginLeft: \"8px\",\n    marginRight: \"8px\",\n  };\n\n  return (\n    <Button\n      onClick={onClick}\n      style={AppButtonStyles}\n      onMouseOver={() => setHover(true)}\n      onMouseOut={() => setHover(false)}\n      disabled={disabled}\n    >\n      {text}\n    </Button>\n  );\n};\n\nexport const HintButton = ({ hint, setHardMode }) => {\n  const [hover, setHover] = useState(false);\n  const [showHint, setShowHint] = useState(false);\n\n  const handleClick = () => {\n    setShowHint(true);\n    setHardMode(false);\n  };\n\n  return (\n    <Button\n      onClick={handleClick}\n      disabled={showHint}\n      onMouseOver={() => setHover(true)}\n      onMouseOut={() => setHover(false)}\n      style={{\n        backgroundColor: showHint ? \"#6c757d\" : hover ? \"#50C878\" : \"#4F7942\",\n        color: \"#ffffff\",\n        border: \"none\",\n        padding: \"10px 20px\",\n        fontSize: \"16px\",\n        borderRadius: \"10px\",\n        marginTop: \"8px\",\n        transition: \"background-color 0.5s ease-in-out, color 0.5s ease-in-out\",\n        cursor: showHint ? \"inherit\" : \"pointer\",\n        marginLeft: \"4px\",\n        marginRight: \"4px\",\n      }}\n    >\n      {showHint ? `Today's Hint: ${hint}` : \"HINT?\"}\n    </Button>\n  );\n};","export const SOLUTIONS = {\n    0: {\n      answer: [\"cheater\", \"imposter\", \"hacker\", \"trickster\"],\n      hint: \"Someone who looks at the solution source code instead of playing the game...\",\n    },\n    1: {\n      answer: [\"rose\", \"tulip\", \"daisy\", \"sunflower\"],\n      hint: \"Garden fare or wandering trader from Stardew Valley.\",\n    },\n    2: {\n      answer: [\"hermione\", \"ronald\", \"fred\", \"minerva\"],\n      hint: \"Your a wizard Harry!\",\n    },\n    3: {\n      answer: [\"rust\", \"python\", \"javascript\", \"assembly\"],\n      hint: \"Languages that power the digital world.\",\n    },\n    4: {\n      answer: [\"dolphin\", \"whale\", \"shark\", \"octopus\"],\n      hint: \"They spend a lot of time exploring the ocean!\",\n    },\n    5: {\n      answer: [\"cookie\", \"lizard\", \"catnip\", \"turkey\"],\n      hint: \"The Cookie Monster loves... but also loves...\",\n    },\n    6: {\n      answer: [\"mountain\", \"valley\", \"plateau\", \"canyon\"],\n      hint: \"Explore Earth's varied terrain from peaks to troughs.\",\n    },\n    7: {\n      answer: [\"comedy\", \"drama\", \"thriller\", \"romance\"],\n      hint: \"Genres that play out life's script on the big screen.\",\n    },\n    8: {\n      answer: [\"hydrogen\", \"carbon\", \"calcium\", \"oxygen\"],\n      hint: \"Theyre elemental-ly found in the body…\",\n    },\n    9: {\n      answer: [\"novel\", \"poetry\", \"drama\", \"mystery\"],\n      hint: \"Literary forms that unfold stories.\",\n    },\n    10: {\n      answer: [\"rain\", \"snow\", \"sunshine\", \"breeze\"],\n      hint: \"Experience nature's weather report with these elements.\",\n    },\n    11: {\n      answer: [\"camera\", \"brush\", \"pen\", \"chisel\"],\n      hint: \"Tools that paint the canvas of creativity.\",\n    },\n    12: {\n      answer: [\"mergesort\", \"algorithm\", \"pointers\", \"shell\"],\n      hint: \"Some of the greatest computer scientist can master these.\",\n    },\n    13: {\n      answer: [\"science\", \"history\", \"math\", \"language\"],\n      hint: \"Unlock the 'knowledge' vault with these subjects.\",\n    },\n    14: {\n      answer: [\"laughter\", \"joy\", \"surprise\", \"contentment\"],\n      hint: \"Feelings that add 'color' to the canvas of human experience.\",\n    },\n    15: {\n      answer: [\"moon\", \"stars\", \"galaxy\", \"cosmos\"],\n      hint: \"Explore the celestial 'dance' in the night sky.\",\n    },\n    16: {\n      answer: [\"chef\", \"scientist\", \"artist\", \"athlete\"],\n      hint: \"People whose professions showcase diverse 'skills'.\",\n    },\n    17: {\n      answer: [\"island\", \"peninsula\", \"archipelago\", \"cape\"],\n      hint: \"Geographical features that 'shape' landscapes.\",\n    },\n    18: {\n      answer: [\"heartbreak\", \"alone\", \"betrayal\", \"forsaken\"],\n      hint: \"Forever broken he walk's a life of solitude\",\n    },\n    19: {\n      answer: [\"computer\", \"tablet\", \"smartphone\", \"laptop\"],\n      hint: \"Digital 'companions' in the modern age.\",\n    },\n    20: {\n      answer: [\"athlete\", \"musician\", \"scientist\", \"artist\"],\n      hint: \"People who excel in their fields, true 'talent' ambassadors.\",\n    },\n  };","export const findSmallestWordLength = (words) => {\n  if (words.length === 0) {\n    return 0; // Return 0 for an empty list of words\n  }\n\n  const smallestLength = words.reduce((minLength, currentWord) => {\n    const currentLength = currentWord.length;\n    return currentLength < minLength ? currentLength : minLength;\n  }, words[0].length);\n\n  return smallestLength;\n};\n\nexport const findLargestWordLength = (words) => {\n  if (words.length === 0) {\n    return 0; // Return 0 for an empty list of words\n  }\n\n  const largestLength = words.reduce((maxLength, currentWord) => {\n    const currentLength = currentWord.length;\n    return currentLength > maxLength ? currentLength : maxLength;\n  }, words[0].length);\n\n  return largestLength;\n};\n\n/*\nexport const getGameNumber = () => {\n  // Get the user's time zone\n  let userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  // Get the current date and time in the user's time zone\n  let currentDate = new Date();\n  let userTimeZoneOffset = currentDate.toLocaleString(\"en\", {\n    timeZone: userTimeZone,\n  });\n  let userCurrentDateTime = new Date(userTimeZoneOffset);\n\n  // Calculate the game number\n  return Math.floor(\n    (userCurrentDateTime.getTime() - new Date(\"2024-03-31\").getTime()) /\n      (1000 * 60 * 60 * 24)\n  );\n};\n*/\n\nexport const getGameNumber = () => {\n  const fs = require('fs');\n  // Get the current date\n  const currentDate = new Date();\n  let date = \"\";\n\n  // Extract the date components\n  const year = currentDate.getFullYear(); // Get the year (YYYY)\n  const month = currentDate.getMonth() + 1; // Get the month (0-11, add 1 to get 1-12)\n  const day = currentDate.getDate(); // Get the day of the month (1-31)\n\n  // Format the date as desired (e.g., YYYY-MM-DD)\n  const formattedDate = year + \"-\" + month.toString().padStart(2, '0') + \"-\" + day.toString().padStart(2, '0');\n\n  // Path to the file\n  const filePath = './date.txt';\n\n  // Read the content of the file\n  try {\n      const data = fs.readFileSync(filePath, 'utf8');\n      if (Math.floor(\n          (currentDate.getTime() - new Date(data).getTime()) /\n          (1000 * 60 * 60 * 24)) >= 20) {\n          // Write the formatted date to the file\n          fs.writeFileSync(filePath, formattedDate, 'utf8');\n          date = formattedDate;\n      } else {\n          date = data;\n      }\n  } catch (err) {\n      console.error(\"Error reading file:\", err);\n      date = formattedDate;\n  }\n\n  // Calculate the game number\n  return Math.floor(\n      (currentDate.getTime() - new Date(date).getTime()) /\n      (1000 * 60 * 60 * 24)\n  );\n};\n\nexport const createInitialGrid = (words, lettersPerRow = 6) => {\n  const flattenedString = words.join(\"\");\n  const totalLetters = flattenedString.length;\n  const missingChars =\n    (lettersPerRow - (totalLetters % lettersPerRow)) % lettersPerRow;\n  const stars = \"*\".repeat(missingChars);\n\n  const modifiedString = flattenedString + stars;\n\n  const shuffledLetters = modifiedString\n    .split(\"\")\n    .sort(() => Math.random() - 0.5);\n\n  const numRows = Math.ceil(modifiedString.length / lettersPerRow);\n  const grid = [];\n\n  for (let i = 0; i < numRows; i++) {\n    const row = [];\n    for (let j = 0; j < lettersPerRow; j++) {\n      const index = i * lettersPerRow + j;\n      const letter = shuffledLetters[index];\n      row.push({ id: index, value: letter });\n    }\n    grid.push(row);\n  }\n\n  return grid;\n};\n\nexport const removeExcessStars = (grid, lettersPerRow = 6) => {\n  const stars = grid.flat().filter((entry) => entry.value === \"*\");\n  let starsToAllow = stars.length % lettersPerRow;\n\n  const updatedGrid = [];\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      const kv = row[j];\n      if (kv[\"value\"] === \"*\" && starsToAllow > 0) {\n        starsToAllow -= 1;\n        updatedGrid.push(kv);\n      } else if (kv[\"value\"] !== \"*\") {\n        updatedGrid.push(kv);\n      }\n    }\n  }\n  const numRows = Math.ceil(updatedGrid.length / lettersPerRow);\n  const reshapedArray = Array.from({ length: numRows }, (_, rowIndex) =>\n    updatedGrid.slice(rowIndex * lettersPerRow, (rowIndex + 1) * lettersPerRow)\n  );\n  return reshapedArray;\n};\n\nexport const shuffleGrid = (grid, lettersPerRow = 6) => {\n  const flatGrid = grid.flat();\n  const shuffledFlatGrid = flatGrid.sort(() => Math.random() - 0.5);\n  const shuffledGrid = [];\n  for (let i = 0; i < shuffledFlatGrid.length; i += lettersPerRow) {\n    const row = shuffledFlatGrid.slice(i, i + lettersPerRow);\n    shuffledGrid.push(row);\n  }\n  return shuffledGrid;\n};\n\n// User history utils\n\n// Function to get today's date in the format 'YYYY-MM-DD'\nconst getFormattedDate = () => {\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = String(today.getMonth() + 1).padStart(2, \"0\");\n  const day = String(today.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};\n\n// Function to save user history for today to localStorage\nexport const saveUserHistoryForToday = (key, value) => {\n  const today = getFormattedDate();\n  const historyString = localStorage.getItem(\"userHistory\");\n  const userHistory = historyString ? JSON.parse(historyString) : {};\n\n  if (!userHistory[today]) {\n    userHistory[today] = {};\n  }\n\n  userHistory[today][key] = value;\n  localStorage.setItem(\"userHistory\", JSON.stringify(userHistory));\n};\n\n// Function to retrieve user history for today from localStorage\nexport const getUserHistoryForToday = () => {\n  const today = getFormattedDate();\n  const historyString = localStorage.getItem(\"userHistory\");\n  const userHistory = historyString ? JSON.parse(historyString) : {};\n  return userHistory[today] || {};\n};\n","import React, { useState, useRef } from \"react\";\nimport { AppButton, HintButton } from \"./Components\";\nimport \"./App.css\";\nimport { SOLUTIONS } from \"./solutions\";\nimport {\n  findSmallestWordLength,\n  findLargestWordLength,\n  saveUserHistoryForToday,\n  getUserHistoryForToday,\n  getGameNumber,\n  createInitialGrid,\n  shuffleGrid,\n  removeExcessStars,\n} from \"./utils\";\n\nimport SuperFunky from \"./fonts/SuperFunky.ttf\";\nimport cat from './cat.jpg';\nimport jailcat from './jailcat.jpg';\nfunction App() {\n  const gameNumber = getGameNumber();\n  let solution;\n  if (SOLUTIONS.hasOwnProperty(gameNumber)) {\n    solution = SOLUTIONS[gameNumber];\n  } else {\n    let valuesArray = Object.values(SOLUTIONS);\n    solution = valuesArray[Math.floor(Math.random() * valuesArray.length)];\n  }\n  const words = solution[\"answer\"];\n  const hint = solution[\"hint\"];\n  const smallestLength = findSmallestWordLength(words);\n  const largestLength = findLargestWordLength(words);\n\n  // State variables\n  const copyTextRef = useRef(null);\n  const [guessEnabled, setGuessEnabled] = useState(false);\n  const [userInput, setUserInput] = useState(\"\");\n  const [guessBox, setGuessBox] = useState(Array(largestLength).fill(\"*\"));\n  const [textCopied, setTextCopied] = useState(false);\n  const [selectedLetters, setSelectedLetters] = useState([]);\n  const [guessCount, setGuessCount] = useState(0);\n\n  const history = getUserHistoryForToday();\n  const [grid, setGrid] = useState(\n    history?.[\"grid\"] || createInitialGrid(words)\n  );\n  const [guessedWords, setGuessedWords] = useState(\n    history?.[\"guessedWords\"] ||\n      words.map((word) => Array(word.length).fill(\"\"))\n  );\n  const [wordBank, setWordBank] = useState(history?.[\"wordBank\"] || []);\n  const [attempts, setAttempts] = useState(history?.[\"attempts\"] || []);\n  const [finishedGame, setFinishedGame] = useState(\n    history?.[\"finishedGame\"] || false\n  );\n  const [hardMode, setHardMode] = useState(history?.[\"hardMode\"] || true);\n\n  const handleGuess = () => {\n    makeGuess();\n  };\n\n  const handleShuffle = () => {\n    const newGrid = shuffleGrid([...grid]);\n    setGrid(newGrid);\n    saveUserHistoryForToday(\"grid\", newGrid);\n  };\n\n  const handleCopyToClipboard = () => {\n    if (copyTextRef.current) {\n      const hiddenTextArea = document.createElement(\"textarea\");\n      const yaas = \"✅\";\n      const nooo = \"❌\";\n      const strikes = attempts\n        .map((attempt) => (attempt ? yaas : nooo))\n        .join(\"\");\n      hiddenTextArea.value = `Save the Cookie Monster #${gameNumber}${hardMode ? `*` : \"\"}\\n${strikes}\\n\\nhttps://codewithtejpratab.github.io/games/`;\n      document.body.appendChild(hiddenTextArea);\n      hiddenTextArea.select();\n      document.execCommand(\"copy\");\n      document.body.removeChild(hiddenTextArea);\n      setTextCopied(true);\n    }\n  };\n\n  const revealWord = (guess) => {\n    const wordIndex = words.findIndex((word) => word.startsWith(guess));\n    const updatedGuessedWords = [...guessedWords];\n    updatedGuessedWords[wordIndex] = words[wordIndex].split(\"\");\n    setGuessedWords(updatedGuessedWords);\n    saveUserHistoryForToday(\"guessedWords\", updatedGuessedWords);\n\n    const updatedGrid = grid.map((row) =>\n      row.map((entry) => {\n        if (selectedLetters.includes(entry[\"id\"])) {\n          return { id: entry[\"id\"], value: \"*\" };\n        } else {\n          return entry;\n        }\n      })\n    );\n\n    const removedStars = removeExcessStars(updatedGrid);\n\n    setGrid(shuffleGrid(removedStars));\n    setSelectedLetters([]);\n    saveUserHistoryForToday(\"grid\", removedStars);\n\n    if (\n      updatedGuessedWords.every((word) => word.every((letter) => letter !== \"\"))\n    ) {\n      setFinishedGame(true);\n      saveUserHistoryForToday(\"finishedGame\", true);\n    }\n  };\n\n  const revealLetters = (guess) => {\n    let guessedLetters = guess;\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i];\n      const guessStatus = guessedWords[i];\n      for (let j = 0; j < word.length; j++) {\n        if (guessStatus[j] === \"\" && guessedLetters.includes(word[j])) {\n          const indexToRemove = guessedLetters.indexOf(word[j]);\n          guessedLetters =\n            guessedLetters.slice(0, indexToRemove) +\n            guessedLetters.slice(indexToRemove + 1);\n          guessedWords[i][j] = word[j];\n        }\n      }\n    }\n    setGuessedWords(guessedWords);\n    setSelectedLetters([]);\n    saveUserHistoryForToday(\"guessedWords\", guessedWords);\n  };\n\n  const makeGuess = () => {\n    const input = userInput.toLowerCase();\n    if (guessCount >= 6) {\n      // User has exceeded guess limit\n      return;\n    }\n    setGuessCount(guessCount + 1); // Increment guess count\n    if (words.includes(input)) {\n      // case where the user made a correct guess\n      setAttempts([...attempts, true]);\n      saveUserHistoryForToday(\"attempts\", [...attempts, true]);\n      // update guessed words\n      revealWord(input);\n    } else {\n      // case where the user made an incorrect guess\n      setAttempts([...attempts, false]);\n      saveUserHistoryForToday(\"attempts\", [...attempts, false]);\n      setWordBank([...wordBank, input]);\n      saveUserHistoryForToday(\"wordBank\", [...wordBank, input]);\n      revealLetters(input);\n    }\n    setUserInput(\"\");\n    setGuessBox(Array(largestLength).fill(\"*\"));\n  };\n\n  const onLetterClick = (letter) => {\n    if (guessBox.slice(-1)[0] === \"*\") {\n      setSelectedLetters([...selectedLetters, letter[\"id\"]]);\n      const newGuess = userInput + letter[\"value\"];\n      setUserInput(newGuess);\n      let newGuessBox = guessBox;\n      for (let i = 0; i < newGuess.length; i++) {\n        newGuessBox[i] = newGuess[i];\n      }\n      setGuessBox(newGuessBox);\n      if (\n        newGuess.length >= smallestLength &&\n        newGuess.length <= largestLength\n      ) {\n        setGuessEnabled(true);\n      } else {\n        setGuessEnabled(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1\n          style={{\n            fontSize: \"2.5em\",\n            marginBottom: \"0px\",\n            fontFamily: \"SuperFunky\",\n            src: `url(${SuperFunky}) format('truetype')`,\n            textShadow: \"2px 2px 4px #000080\",\n          }}\n        >\n          Save the Coookie Monster\n        </h1>\n        \n        {guessCount >= 6 && !finishedGame && (\n  <div >\n    <h2>Game Over!</h2>\n    <p>Sorry, you have reached the maximum number of guesses.</p>\n    <p>Try again later!</p>\n    <img src={jailcat} alt=\"jailcat\" height= \"50%\" width= \"50%\" /> \n    <p>The Cookie Monster has been sentenced to life in Meow Pound🚔.</p>\n    <p><b>You Have Fail To Save The Cookie Monster!!😔</b></p>\n  </div>\n)}\n        {!finishedGame && guessCount < 6 ? (\n          <>\n           <div className=\"container\">\n              {/* Image */}\n              <img src={cat} alt=\"Placeholder\" className=\"me\"/>\n              <p>\n               Whiskey is a wanted cat 🐱 all around Cat City for stealing cookies🍪. Because of that he has been given the name Cookie Monster. \n               The meow corp is hot 🔥on his paws🐾. If he is caught he'll be sentenced for life in Meow Pound🚔.\n                <strong>     \n                  Hurry! Solve the puzzle 🧩 to save the Cookie Monster!\n                </strong>\n              </p>\n          </div> \n            {/* Hints */}\n            <HintButton hint={hint} setHardMode={setHardMode} />\n            {/* Guesses */}\n            <h3 style={{ marginBottom: \"0px\" }}>\n              Guess:{\" \"}\n              <span style={{ fontSize: \"24px\" }}>\n                {attempts.map((attempt) => (attempt ? \"✅\" : \"❌\"))}\n              </span>\n            </h3>\n            <div>\n              <span style={{ fontSize: \"18px\" }}>\n                <b>Poor guess:</b> {wordBank.join(\", \")}{\" \"}\n                {wordBank.length === 0 && \"NA\"}\n              </span>\n            </div>\n            <div style={{ marginBottom: \"8px\" }}>\n              {guessedWords.map((word, wordIndex) => {\n                const guesses = word.map((letter, letterIndex) => {\n                  return (\n                    <span key={`${wordIndex}_${letterIndex}`}>\n                      {letter.length > 0 ? `${letter} ` : \"_ \"}\n                    </span>\n                  );\n                });\n                return (\n                  <>\n                    {guesses}\n                    <br />\n                  </>\n                );\n              })}\n            </div>\n            <div>\n              {guessBox.map((entry, entryId) => (\n                <div\n                  key={entryId}\n                  style={{\n                    display: \"inline-block\",\n                    backgroundColor: entry === \"*\" ? \"transparent\" : \"#4F7942\",\n                    border: entry === \"*\" ? \"2px solid black\" : \"none\",\n                    width: `${Math.min(window.innerWidth / (largestLength + 3), 45)}px`,\n                    height: `${Math.min(window.innerWidth / (largestLength + 3), 45)}px`,\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    fontFamily: \"Futura, sans-serif\",\n                    fontWeight: \"bold\",\n                    textTransform: \"uppercase\",\n                    margin: \"4px\",\n                    fontSize: \"xx-large\",\n                    color: entry === \"*\" ? \"transparent\" : \"white\",\n                  }}\n                >\n                  {entry === \"*\" ? \"*\" : entry}\n                </div>\n              ))}\n            </div>\n            {/* Grid */}\n            <div style={{ marginTop: \"16px\" }}>\n              {grid.map((row, rowIndex) => (\n                <div key={rowIndex} style={{ display: \"flex\" }}>\n                  {row.map((entry) => (\n                    <div\n                      key={entry[\"id\"]}\n                      style={{\n                        backgroundColor: \"white\",\n                        width: `50px`,\n                        height: `50px`,\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        fontFamily: \"Futura, sans-serif\",\n                        fontWeight: \"bold\",\n                        textTransform: \"uppercase\",\n                        margin: \"4px\",\n                        cursor: entry[\"value\"] === \"*\" ? \"click\" : \"pointer\",\n                        fontSize: \"xx-large\",\n                        color:\n                          entry[\"value\"] === \"*\"\n                            ? \"white\"\n                            : selectedLetters.includes(entry[\"id\"])\n                              ? \"#50C878\" // light grey\n                              : \"black\",\n                      }}\n                      onClick={() =>\n                        entry[\"value\"] !== \"*\" &&\n                        !selectedLetters.includes(entry[\"id\"]) &&\n                        onLetterClick(entry)\n                      }\n                    >\n                      {entry[\"value\"]}\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n            <div style={{ display: \"flex\" }}>\n              <AppButton onClick={handleShuffle} text=\"Shuffle\" />{\" \"}\n              <AppButton\n                onClick={() => {\n                  setUserInput(\"\");\n                  setGuessBox(Array(largestLength).fill(\"*\"));\n                  setSelectedLetters([]);\n                }}\n                text=\"Clear\"\n              />{\" \"}\n              <AppButton\n                onClick={handleGuess}\n                disabled={!guessEnabled}\n                text=\"Guess\"\n              />\n            </div>\n          </>\n        ) : null}\n        {/* Finished board */}\n        {finishedGame && (\n          <div>\n            <h3 style={{ marginBottom: \"0px\" }}>\n              Looks like you saved the Cookie Monster!\n            </h3>\n            <p style={{ marginBottom: \"0px\" }}>\n              Save-The-Cookie-Monster {gameNumber}\n              {hardMode && \"*\"}{\" \"}\n              <span style={{ fontSize: \"24px\" }}>\n                {attempts.map((attempt) => (attempt ? \"✅\" : \"❌\"))}\n              </span>\n            </p>\n            <p style={{ fontSize: \"18px\" }}>\n              {textCopied &&\n                \"Result copied to keyboard, now paste and share with friends!\"}\n            </p>\n            <AppButton\n              onClick={handleCopyToClipboard}\n              text=\"Share with Friends\"\n            />\n            <div style={{ display: \"none\" }}>\n              <textarea ref={copyTextRef} readOnly />\n            </div>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n  }\n  \n  export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}